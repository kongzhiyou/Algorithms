给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:
输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

题解：初始化一个sum=0变量，和max_sum=nums[0]用于存储当前和的最大值。 遍历数组，并在每一次遍历，判断sum是否大于0，如果大于0就对取得最大值是有利的就把sum和当
遍历的值nums[i]相加，否则把当前值赋给sum，然后在每次迭代的最后判断sum和max_sum中的最大值，把最大值赋值给max_sum。

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int maxSubArray(vector<int>& nums) {
    int sum = 0;
    int max_sum = nums[0];
    for(int i=0;i<nums.size();i++){
          if(sum>0){
            sum += nums[i];
          }else{
            sum = nums[i];
          }
          max_sum = max(sum,max_sum);
    }
    return max_sum;
}
int main()
{
    int value ;
    vector<int> nums;
    while(cin>>value){
        if(value==100){
            break;
        }else{
            nums.push_back(value);
        }
    }
    int target = maxSubArray(nums);
    cout<<target;
    return 0;
}
