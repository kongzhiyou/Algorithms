#include <iostream>
#include <vector>

using namespace std;

#1. 最简单的思路就是双重遍历，时间复杂度O(n^2)
vector<int> twoSum(vector<int>& nums, int target){
    vector<int> arr;
    for(int i=0;i<nums.size()-1;i++){
        for(int j=i+1;j<nums.size();j++){
            if((nums[i]+nums[j])==target){
                arr.push_back(i);
                arr.push_back(j);
            }
        }
    }
    return arr;
}
# 2. 使用unordered_map的hash映射直接搜索到目标值,时间复杂度O(n)
vector<int> twoSum(vector<int> &nums,int target){
    vector<int> result;
    unordered_map<int,int> m;
    for(int i=0;i<nums.size();++i){
        m[nums[i]]=i;
    }
    for(int j=0;j<nums.size();++j){
        int another_num=target-nums[j];
        if(m.count(another_num)&&(m[another_num]!=j)){
            result.push_back(j);
            result.push_back(m[another_num]);
        }
    }
    #去除重复值
    set<int> st(result.begin(),result.end());
    result.assign(st.begin(),st.end());
    return result;
}

int main()
{
    vector<int>::iterator out;
    vector<int> nums;
    int value;
    while(cin>>value){
        if(value!=-1){
           nums.push_back(value);
        }else{
            break;
        }
    }
    vector<int> tar = twoSum(nums,9);
    for(out=tar.begin();out!=tar.end();out++)
        cout<<*out<<" ";
    return 0;
}
