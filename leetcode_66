题目描述：给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:
输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。

示例 2:
输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。

题解：

#include <iostream>
#include <vector>
using namespace std;
vector<int> plusOne(vector<int>& digits) {
    int p = digits.size()-1;
    //此处必须要加p>=0的判断要不然容易数组越界
    while(p>=0&&digits[p]==9){
        digits[p]=0;
        p--;
    }
    if(p>=0){
        digits[p]++;
    }
    else{
        digits[0] = 1;
        digits.push_back(0);
    }
    return digits;
}
int main()
{
    int value;
    vector<int> digits;
    vector<int>::iterator it;
    while(cin>>value){
       if(value!=-1){
        digits.push_back(value);
       }
       else break;
    }
    vector<int> target = plusOne(digits);
    for(it=target.begin();it!=target.end();it++){
        cout<<*it<<" ";
    }
    return 0;
}
